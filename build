#!/usr/bin/env python3

import os, sys, subprocess, json

def shell(command):
	print(command)
	subprocess.Popen(command, shell=True).wait()

command = sys.argv[1] if len(sys.argv) > 1 else 'graphic'

src = [
	'shader.cc',
	'main.cc',
	'hello_window.cc',
	'hello_triangle.cc',
	'shaders.cc',
	'textures.cc',
	'transformations.cc'
]

depend = {
	'shader.cc': ['shader.hh'],
	'shaders.cc': ['shader.hh'],
	'textures.cc': ['shader.hh'],
	'transformations.cc': ['shader.hh']
}
depend = {key: depend[key] if key in depend else [] for key in src}
depend = {key: ['build'] + val for key, val in depend.items()}

obj = ['{}.o'.format(os.path.splitext(x)[0]) for x in src]

if command == 'graphic':
	old = False
	for (s, o) in zip(src, obj):
		if (
			not os.path.isfile(o)
			or os.path.getmtime(s) > (o_age := os.path.getmtime(o))
			or any([os.path.getmtime(x) > o_age for x in depend[s]])
		):
			old = True
			shell('x86_64-w64-mingw32-g++-posix -std=c++17 -Iinclude -c -o {} {}'.format(o, s))
	if (old):
		shell('x86_64-w64-mingw32-g++-posix {} -Llib -lglad -lglfw3 -lstb_image -lgdi32 -static-libstdc++ -static -lpthread -o graphic'.format(' '.join(obj)))
		try:
			os.renames('graphic.exe', 'graphic')
		except:
			pass
	else:
		print('up to date.')

if command == 'compile':
	cwd = os.getcwd()
	compile = []
	for file in src:
		compile.append({
			'directory': cwd,
			'arguments': ['-std=c++17', '-Iinclude'],
			'file': file
		})
	compile = json.dumps(compile, indent='\t')
	with open('compile_commands.json', 'w') as file:
		print(compile, file=file)
	print(compile)

if command == 'clean':
	shell('rm -f {}'.format(' '.join(obj)))
	shell('rm -f graphic')

if command == 'reset':
	shell('rm -f compile_commands.json')
	shell('rm -rf .cache')
